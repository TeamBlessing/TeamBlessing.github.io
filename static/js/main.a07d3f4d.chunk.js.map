{"version":3,"sources":["logo.svg","bg.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","lang","setLang","useEffect","localStorage","getItem","className","src","logo","alt","fill","onClick","setItem","bg","href","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,uMC8D5BC,MAzDf,WAAgB,IAAD,EACWC,oBAAS,GADpB,mBACNC,EADM,KACAC,EADA,KAab,OATAC,qBAAU,WACRD,EAA0C,SAAlCE,aAAaC,QAHP,cAIb,IAQD,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,MAAMC,IAAKC,IAAMC,IAAI,GAAGC,KAAK,aAE9C,yBAAKJ,UAAU,OAAOK,QAXR,WAClBT,GAASD,GACTG,aAAaQ,QARC,WAQiBX,KAUzB,0BAAMK,UAAWL,EAAO,SAAW,IAAnC,MADF,MACqD,0BAAMK,UAAWL,EAAO,GAAK,UAA7B,QAGvD,yBAAKK,UAAU,KAAKC,IAAKM,IAAIJ,IAAI,KACjC,yBAAKH,UAAU,eACZL,EACC,oCACE,yBAAKK,UAAU,SAAf,kCACA,yBAAKA,UAAU,aAAf,4CACA,yBAAKA,UAAU,QAAf,oWAMA,uBAAGQ,KAAK,0BAA0BC,OAAO,SAAST,UAAU,SAA5D,gBAKF,oCACE,yBAAKA,UAAU,SAAf,oDACA,yBAAKA,UAAU,aAAf,sEACA,yBAAKA,UAAU,QAAf,siBAGA,uBAAGQ,KAAK,0BAA0BC,OAAO,SAAST,UAAU,SAA5D,wBAMN,yBAAKA,UAAU,iBC7CDU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a07d3f4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.788b89b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg.549735aa.jpg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport bg from './bg.jpg';\nimport './App.css';\n\nfunction App() {\n  const [lang, setLang] = useState(true);\n  const langKey = 'acbLang';\n\n  useEffect(() => {\n    setLang(localStorage.getItem(langKey) === 'true' ? true : false);\n  }, []);\n\n  const onLangClick = () => {\n    setLang(!lang);\n    localStorage.setItem(langKey, !lang);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <div className=\"logo\">\n          <img className=\"svg\" src={logo} alt=\"\" fill=\"#f2f2f2\" />\n        </div>\n        <div className=\"lang\" onClick={onLangClick}>\n          <span className={lang ? 'active' : ''}>EN</span> / <span className={lang ? '' : 'active'}>CN</span>\n        </div>\n      </div>\n      <img className=\"bg\" src={bg} alt=\"\" />\n      <div className=\"App-Content\">\n        {lang ? (\n          <>\n            <div className=\"title\">AUTOMATIC CITIZENSHIP BLESSING</div>\n            <div className=\"sub-title\">THE ULTIMATE FUTURE OF HUMAN MUTUAL FUND</div>\n            <div className=\"desc\">\n              By atomizing the citizens, the rulers make it impossible for the citizens to spontaneously form a true\n              community and construct an order that can circulate positively, thus making it impossible to get out of\n              the pyramid of modern slavery, and all because of the extreme greed of the rulers, not because of human\n              nature.We will put an END to all of this.\n            </div>\n            <a href=\"./ACB-WHITEPAPER-EN.pdf\" target=\"_blank\" className=\"paper\">\n              White Paper\n            </a>\n          </>\n        ) : (\n          <>\n            <div className=\"title\">自动公民福报系统</div>\n            <div className=\"sub-title\">未来人类互助的最终形态</div>\n            <div className=\"desc\">\n              统治者通过将公民原子化，使得公民无法自发形成真正的共同体和构建出能够正循环的秩序，从而无法跳出现代奴隶制的金字塔，而这一切的原因是因为统治者的极度贪婪，而非人性。我们将会终结这一切。\n            </div>\n            <a href=\"./ACB-WHITEPAPER-CN.pdf\" target=\"_blank\" className=\"paper\">\n              白皮书\n            </a>\n          </>\n        )}\n      </div>\n      <div className=\"App-footer\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}